package lambda;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Lambda_01 {
	/*
	 * 
	 * 1) Lambda "Functional Programming" "Functional Programming" de
	 * "Nasil yaparim?" degil "Ne yaparim?" dusunulur. 2) "Structured Programming"
	 * de "Ne yaparim?" dan cok "Nasil Yaparim?" dusunulur 3)
	 * "Functional Programming" hiz, code kisaligi, code okunabilirligi ve hatasiz
	 * code yazma acilarindan cok faydalidir. 4) Lambda sadece
	 * collections'larda(List, Queue ve Set) ve array'lerde kullanilabilir ancak
	 * map'lerde kullanılmaz. Lambda kullanmak hatasız code kullanmaktır.
	 */

	public static void main(String[] args) {
		List<Integer> List = new ArrayList<>(Arrays.asList(12, 13, 65, 3, 7, 34, 22, 60, 42, 55));
		prinElStructured(List);
		System.out.println();

		System.out.println("     *********  ");

		printElfunctional(List);
		System.out.println();

		System.out.println("     *********  ");
		prinElStructured(List);
		System.out.println();

		System.out.println("     *********  ");
		printElfunctional1(List);
		System.out.println();

		System.out.println("     *********  ");
		printCiftElStuructured(List);
		System.out.println();

		System.out.println("     *********  ");
		printCiftElStuructured1(List);
		System.out.println();

		System.out.println("     *********  ");
		printCiftElStuructured2(List);
		System.out.println();

		System.out.println("     *********  ");

		printCiftAltmisKucuk(List);
		System.out.println();

		System.out.println("     *********  ");

		printTekYirmidenBuyuk(List);
	}

	// structured Programming ile list elemanlerinin tamamini yazdiriniz
	public static void prinElStructured(List<Integer> List) {

		for (Integer v : List) {
			System.out.print(v + " "); // 12 13 65 3 7 34 22 60 42 55
		}

	}
	// Functional Programming ile list elemanlerinin tamamini aralarina bosluk
	// birakarak yazdiriniz

	public static void printElfunctional(List<Integer> List) {

		List.stream().forEach(t -> System.out.print(t + " "));
	}
	// Method Reference --> kendi create ettigimiz veya java'dan aldigimiz method
	// ile
	// ClassName::MethodName EZBERLEEEE

	public static void printEl(int t) {
		System.out.print(t + " ");

	}

	public static void printElfunctional1(List<Integer> List) {
		List.stream().forEach(Lambda_01::printEl);

	}
	// structured Programming ile list elemanlerinin cift olanalrini ayni satirda
	// aralarina bosluk birakarak yazdiriniz

	public static void printCiftElStuructured(List<Integer> List) {
		for (Integer w : List) {
			if (w % 2 == 0) {
				System.out.print(w + " ");

			}
		}

	}

	public static void printCiftElStuructured1(List<Integer> List) {
		List.stream().filter(t -> t % 2 == 0).forEach(Lambda_01::printEl);

	}

	public static boolean ciftBul(int i) {

		return i % 2 == 0;

	}

	public static void printCiftElStuructured2(List<Integer> List) {
		List.stream().filter(Lambda_01::ciftBul).forEach(Lambda_01::printEl);

	}

	// Functional Programming ile list elemanlarinin cift olanalrinin
	// 60 dan kucuk olanlarını ayni satirda aralarina bosluk birakarak yazdiriniz.

	public static void printCiftAltmisKucuk(List<Integer> List) {

		List.stream().filter(t -> t % 2 == 0 & t < 60).forEach(Lambda_01::printEl);

	}
	//Functional Programming ile list elemanlarinin  tek olanalrini veya 20 dan buyuk
    // olanlarını ayni satirda aralarina bosluk birakarak yazdiriniz

	public static void printTekYirmidenBuyuk(List<Integer> List) {
		List.stream().filter(t -> t % 2 == 1 || t > 20).forEach(Lambda_01::printEl);
	}





}
